import static org.junit.Assert.*;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.Test;

import function.AppFunction;
import generator.impl.ValuesGeneratorImpl;

public class FunctionExplorerTest {

	private double start = 1.5;
	private double finish = 6.5;
	private double step = 0.05;
	private ArrayList<Double> xValues = new ValuesGeneratorImpl().generate(start, finish, step);
	private ArrayList<Double> yValues = new ValuesGeneratorImpl().generate(start, finish, step);
	private ArrayList<Double> aValues = new ValuesGeneratorImpl().generate(0.5, 1.5, 0.5);

	@Test
	public void testDifferentiateFirstAnalyticFunction() {
		FunctionExplorer funcrionExplorer = new FunctionExplorer();
		AppFunction firstFunction = x -> Math.exp(-x * x) * Math.sin(x); /* f(x) = exp(-x^2) * sin(x) */
		List<Double> result = funcrionExplorer.differentiateAnalyticFunction(xValues, firstFunction);

		List<Double> correctAnswer = Arrays.asList(-0.3079499480349024, -0.2785810559527424, -0.2495269508795417,
				-0.22136315739468282, -0.19454480177164002, -0.16941240197493324, -0.14620091823291936,
				-0.12505112347363512, -0.10602240708458555, -0.0891062154981942, -0.07423944843598651,
				-0.06131725936806692, -0.05020484234678074, -0.04074791659126886, -0.03278173911795343,
				-0.026138578905921667, -0.020653671727738354, -0.016169740919488862, -0.012540217231597414,
				-0.009631321127136563, -0.00732318613735905, -0.005510204418831058, -0.004100768435217304,
				-0.0030165683210896244, -0.0021915855044911565, -0.0015709017523206012, -0.001109420761800841,
				-7.705781017141038E-4, -5.250957322323619E-4, -3.498201090407834E-4, -2.266683353718753E-4,
				-1.4169504621534276E-4, -8.428357285458626E-5, -4.6458215462596076E-5, -2.230982638348278E-5,
				-7.524029301810711E-6, 1.0000841097639913E-6, 5.453360628493786E-6, 7.354333170875733E-6,
				7.732693951107732E-6, 7.268717285499909E-6, 6.397550598432441E-6, 5.385959256500611E-6,
				4.387832749568491E-6, 3.483589107373415E-6, 2.7075798179804136E-6, 2.066710257432048E-6,
				1.552749242627959E-6, 1.1501962541086699E-6, 8.410916572433966E-7, 6.077773092365747E-7,
				4.3432518123186107E-7, 3.0713389678314625E-7, 2.1503276875074713E-7, 1.4911731581137498E-7,
				1.0245876711896568E-7, 6.977401671335704E-8, 4.7105030656598024E-8, 3.1532489240863183E-8,
				2.093344942998003E-8, 1.3784053596491116E-8, 9.0036431761543E-9, 5.834546705374747E-9,
				3.751264221650612E-9, 2.393076717077622E-9, 1.5148300786995527E-9, 9.515092566841665E-10,
				5.930771852050481E-10, 3.6682573104763693E-10, 2.2514068719426021E-10, 1.3711434950111527E-10,
				8.285701016925768E-11, 4.967855445769512E-11, 2.955088838217693E-11, 1.743791212110037E-11,
				1.0206859784011852E-11, 5.9252210469917265E-12, 3.410835459137989E-12, 1.946595930231666E-12,
				1.1011538558437824E-12, 6.172420534768234E-13, 3.42729740174287E-13, 1.8843416003510256E-13,
				1.0253285685787471E-13, 5.518185177950918E-14, 2.935136225021402E-14, 1.541490207217341E-14,
				7.983547591990585E-15, 4.070869227743755E-15, 2.039209712047896E-15, 1.0004464428919086E-15,
				4.785856337399804E-16, 2.217269924002127E-16, 9.838773370406926E-17, 4.0977161672346794E-17,
				1.534191059373068E-17, 4.564362771563022E-18, 4.611340278655872E-19, -8.111280226860801E-19,
				-9.889075971739451E-19, -8.149348651841663E-19);

		assertArrayEquals(correctAnswer.toArray(), result.toArray());
	}

	@Test
	public void testDifferentiateSecondAnalyticFunction() {
		FunctionExplorer funcrionExplorer = new FunctionExplorer();
		AppFunction secondFunction; /* f(x) = exp(-a * x^2) * sin(x) */

		double a_0_5 = aValues.get(0);
		secondFunction = x -> Math.exp(-a_0_5 * x * x) * Math.sin(x);
		List<Double> result0_5 = funcrionExplorer.differentiateAnalyticFunction(xValues, secondFunction);

		double a_1 = aValues.get(1);
		secondFunction = x -> Math.exp(-a_1 * x * x) * Math.sin(x);
		List<Double> result1 = funcrionExplorer.differentiateAnalyticFunction(xValues, secondFunction);

		double a_1_5 = aValues.get(1);
		secondFunction = x -> Math.exp(-a_1_5 * x * x) * Math.sin(x);
		List<Double> result1_5 = funcrionExplorer.differentiateAnalyticFunction(xValues, secondFunction);

		List<Double> correctAnswer0_5 = Arrays.asList(-0.4627938057777392, -0.4599115478454152, -0.4527885502370044,
				-0.44191713893804163, -0.42780243413031993, -0.41095171159077903, -0.39186472158836416,
				-0.37102510981601444, -0.34889304190155457, -0.32589908989522076, -0.30243939960067356,
				-0.27887212064592326, -0.255515049125965, -0.2326444056358068, -0.2104946487183068, -0.1892592077432087,
				-0.16909200806214386, -0.15010965449813174, -0.13239413841972802, -0.11599593587041657,
				-0.1009373710499778, -0.08721612809389767, -0.07480880607167728, -0.06367442495752024,
				-0.05375780450737194, -0.04499275225999799, -0.03730501128710109, -0.03061493191163639,
				-0.024839844436127384, -0.019896121435060074, -0.01570092826282468, -0.012173669123379405,
				-0.009237143018986675, -0.006818429449994217, -0.0048495277404805685, -0.003267776537264986,
				-0.0020160814492463028, -0.0010429791535634947, -3.025657605861508E-4, 2.4568405881768285E-4,
				6.371824964900887E-4, 9.025561384422634E-4, 0.0010680156585507472, 0.0011557503418386551,
				0.001184332766189164, 0.0011691215393797721, 0.0011226524367525127, 0.0010550105305974673,
				9.741779355041617E-4, 8.863535625944219E-4, 7.962428087476738E-4, 7.073163720445206E-4,
				6.220384127626983E-4, 5.420650929803452E-4, 4.6841511058663427E-4, 4.01614285203784E-4,
				3.418164998687497E-4, 2.889034526610797E-4, 2.425656945371005E-4, 2.023673823085576E-4,
				1.6779706054801617E-4, 1.3830662633432657E-4, 1.1334044546639107E-4, 9.235638496378831E-5,
				7.484031815362937E-5, 6.0315453456063844E-5, 4.834764124390012E-5, 3.8547630826267845E-5,
				3.057108107295219E-5, 2.4116980652207412E-5, 1.8925001535817263E-5, 1.477219699171019E-5,
				1.1469359181773416E-5, 8.857271329899575E-6, 6.803023963734753E-6, 5.196511695199449E-6,
				3.947185371861054E-6, 2.98110213868774E-6, 2.2382917152274672E-6, 1.6704395022580779E-6,
				1.2388747920078555E-6, 9.128442199768581E-7, 6.680457381259715E-7, 4.853960147621443E-7,
				3.5000360350553285E-7, 2.5032094382140534E-7, 1.7744982586969975E-7, 1.2457705412397294E-7,
				8.65194113385237E-8, 5.935948405575076E-8, 4.0156328291486964E-8, 2.6717239822287893E-8,
				1.741899825755047E-8, 1.1068844019894545E-8, 6.797115271096129E-9, 3.974918487593757E-9,
				2.1514439469761914E-9, 1.006582257188582E-9, 3.1537005455722206E-10, -7.848717455498772E-11,
				-2.821790309211185E-10);

		List<Double> correctAnswer1 = Arrays.asList(-0.3079499480349024, -0.2785810559527424, -0.2495269508795417,
				-0.22136315739468282, -0.19454480177164002, -0.16941240197493324, -0.14620091823291936,
				-0.12505112347363512, -0.10602240708458555, -0.0891062154981942, -0.07423944843598651,
				-0.06131725936806692, -0.05020484234678074, -0.04074791659126886, -0.03278173911795343,
				-0.026138578905921667, -0.020653671727738354, -0.016169740919488862, -0.012540217231597414,
				-0.009631321127136563, -0.00732318613735905, -0.005510204418831058, -0.004100768435217304,
				-0.0030165683210896244, -0.0021915855044911565, -0.0015709017523206012, -0.001109420761800841,
				-7.705781017141038E-4, -5.250957322323619E-4, -3.498201090407834E-4, -2.266683353718753E-4,
				-1.4169504621534276E-4, -8.428357285458626E-5, -4.6458215462596076E-5, -2.230982638348278E-5,
				-7.524029301810711E-6, 1.0000841097639913E-6, 5.453360628493786E-6, 7.354333170875733E-6,
				7.732693951107732E-6, 7.268717285499909E-6, 6.397550598432441E-6, 5.385959256500611E-6,
				4.387832749568491E-6, 3.483589107373415E-6, 2.7075798179804136E-6, 2.066710257432048E-6,
				1.552749242627959E-6, 1.1501962541086699E-6, 8.410916572433966E-7, 6.077773092365747E-7,
				4.3432518123186107E-7, 3.0713389678314625E-7, 2.1503276875074713E-7, 1.4911731581137498E-7,
				1.0245876711896568E-7, 6.977401671335704E-8, 4.7105030656598024E-8, 3.1532489240863183E-8,
				2.093344942998003E-8, 1.3784053596491116E-8, 9.0036431761543E-9, 5.834546705374747E-9,
				3.751264221650612E-9, 2.393076717077622E-9, 1.5148300786995527E-9, 9.515092566841665E-10,
				5.930771852050481E-10, 3.6682573104763693E-10, 2.2514068719426021E-10, 1.3711434950111527E-10,
				8.285701016925768E-11, 4.967855445769512E-11, 2.955088838217693E-11, 1.743791212110037E-11,
				1.0206859784011852E-11, 5.9252210469917265E-12, 3.410835459137989E-12, 1.946595930231666E-12,
				1.1011538558437824E-12, 6.172420534768234E-13, 3.42729740174287E-13, 1.8843416003510256E-13,
				1.0253285685787471E-13, 5.518185177950918E-14, 2.935136225021402E-14, 1.541490207217341E-14,
				7.983547591990585E-15, 4.070869227743755E-15, 2.039209712047896E-15, 1.0004464428919086E-15,
				4.785856337399804E-16, 2.217269924002127E-16, 9.838773370406926E-17, 4.0977161672346794E-17,
				1.534191059373068E-17, 4.564362771563022E-18, 4.611340278655872E-19, -8.111280226860801E-19,
				-9.889075971739451E-19, -8.149348651841663E-19);

		List<Double> correctAnswer1_5 = Arrays.asList(-0.3079499480349024, -0.2785810559527424, -0.2495269508795417,
				-0.22136315739468282, -0.19454480177164002, -0.16941240197493324, -0.14620091823291936,
				-0.12505112347363512, -0.10602240708458555, -0.0891062154981942, -0.07423944843598651,
				-0.06131725936806692, -0.05020484234678074, -0.04074791659126886, -0.03278173911795343,
				-0.026138578905921667, -0.020653671727738354, -0.016169740919488862, -0.012540217231597414,
				-0.009631321127136563, -0.00732318613735905, -0.005510204418831058, -0.004100768435217304,
				-0.0030165683210896244, -0.0021915855044911565, -0.0015709017523206012, -0.001109420761800841,
				-7.705781017141038E-4, -5.250957322323619E-4, -3.498201090407834E-4, -2.266683353718753E-4,
				-1.4169504621534276E-4, -8.428357285458626E-5, -4.6458215462596076E-5, -2.230982638348278E-5,
				-7.524029301810711E-6, 1.0000841097639913E-6, 5.453360628493786E-6, 7.354333170875733E-6,
				7.732693951107732E-6, 7.268717285499909E-6, 6.397550598432441E-6, 5.385959256500611E-6,
				4.387832749568491E-6, 3.483589107373415E-6, 2.7075798179804136E-6, 2.066710257432048E-6,
				1.552749242627959E-6, 1.1501962541086699E-6, 8.410916572433966E-7, 6.077773092365747E-7,
				4.3432518123186107E-7, 3.0713389678314625E-7, 2.1503276875074713E-7, 1.4911731581137498E-7,
				1.0245876711896568E-7, 6.977401671335704E-8, 4.7105030656598024E-8, 3.1532489240863183E-8,
				2.093344942998003E-8, 1.3784053596491116E-8, 9.0036431761543E-9, 5.834546705374747E-9,
				3.751264221650612E-9, 2.393076717077622E-9, 1.5148300786995527E-9, 9.515092566841665E-10,
				5.930771852050481E-10, 3.6682573104763693E-10, 2.2514068719426021E-10, 1.3711434950111527E-10,
				8.285701016925768E-11, 4.967855445769512E-11, 2.955088838217693E-11, 1.743791212110037E-11,
				1.0206859784011852E-11, 5.9252210469917265E-12, 3.410835459137989E-12, 1.946595930231666E-12,
				1.1011538558437824E-12, 6.172420534768234E-13, 3.42729740174287E-13, 1.8843416003510256E-13,
				1.0253285685787471E-13, 5.518185177950918E-14, 2.935136225021402E-14, 1.541490207217341E-14,
				7.983547591990585E-15, 4.070869227743755E-15, 2.039209712047896E-15, 1.0004464428919086E-15,
				4.785856337399804E-16, 2.217269924002127E-16, 9.838773370406926E-17, 4.0977161672346794E-17,
				1.534191059373068E-17, 4.564362771563022E-18, 4.611340278655872E-19, -8.111280226860801E-19,
				-9.889075971739451E-19, -8.149348651841663E-19);

		assertArrayEquals(correctAnswer0_5.toArray(), result0_5.toArray());
		assertArrayEquals(correctAnswer1.toArray(), result1.toArray());
		assertArrayEquals(correctAnswer1_5.toArray(), result1_5.toArray());

	}

	@Test
	public void testDifferentiateFirstTableFunctionInFile() {

		double startX = 0;
		double endX = 2 * Math.PI;
		double step = 0.1;

		String filePath = "/home/mint/java-workspace/FunctionExplorer/sin_values";

		try {
			BufferedWriter writer = new BufferedWriter(new FileWriter(filePath));
			for (double x = startX; x <= endX; x += step) {
				double y = Math.sin(x);
				writer.write(String.format("%.2f %.4f%n", x, y));
			}
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		FunctionExplorer funcrionExplorer = new FunctionExplorer();
		List<Double> result = funcrionExplorer.differentiateTableFunction(filePath);

		List<Double> correctAnswer = Arrays.asList(3113650.994499984, 0.9935000000044214, 0.978499999998439,
				0.9534999999838423, 0.9194999999739828, 0.8760000000107571, 0.824000000010372, 0.7640000000419533,
				0.6955000000363754, 0.6204999999925853, 0.5394999999519534, 0.4524999999699908, 0.36199999997599264,
				0.2669999999427297, 0.16949999998017162, 0.07099999999038431, -0.029000000012491256,
				-0.12899999995985567, -0.22699999996378395, -0.3224999999829059, -0.41550000001722154,
				-0.5040000000677836, -0.5875000000932218, -0.6650000001218181, -0.7360000001122025, -0.8000000000785157,
				-0.855500000174203, -0.9025000001217087, -0.9410000001153218, -0.969500000141954, -0.9880000001322164,
				-0.997500000134155, -0.9965000001346813, -0.9855000001335323, -0.9655000001440595, -0.9350000001462355,
				-0.8950000001395342, -0.8470000000815325, -0.7900000000837792, -0.7245000001043778, -0.6525000000867642,
				-0.5740000000309387, -0.48950000003378236, -0.4000000000670134, -0.30650000004683875,
				-0.2104999999863466, -0.1119999999965593, -0.012500000035053915, 0.08699999998196262,
				0.18649999999897915, 0.28350000003118936, 0.377000000051364, 0.4675000000453622, 0.5535000000556067,
				0.6340000000548685, 0.7075000000855702, 0.7740000000922009, 0.8335000000747605, 0.8840000001175685,
				0.9260000001232171, 0.958500000147744, 0.9815000001356378, 0.9910000001375763);

		File file = new File(filePath);
		try {
			file.delete();
		} catch (Exception e) {
			e.printStackTrace();
		}

		assertArrayEquals(correctAnswer.toArray(), result.toArray());

	}

	@Test
	public void testDifferentiateCustomAnalyticFunction() {
		FunctionExplorer funcrionExplorer = new FunctionExplorer();
	 String expression = "x^2";

		List<Double> result = funcrionExplorer.differentiateAnalyticFunction(xValues, expression);

		List<Double> correctAnswer = Arrays.asList(2.9999999997532, 3.099999999589542, 3.1999999998699735,
				3.2999999997063156, 3.3999999997647024, 3.4999999996010445, 3.599999999659431, 3.699999999717818,
				3.7999999997762046, 3.8999999998345913, 4.000000000115023, 4.100000000395454, 4.200000000675885,
				4.300000000512227, 4.400000000792659, 4.500000000629001, 4.600000000465343, 4.700000000301685,
				4.800000000582116, 4.900000000862548, 5.00000000069889, 5.100000000535232, 5.200000000815663,
				5.300000000652005, 5.400000000932437, 5.500000000768779, 5.600000000605121, 5.700000000885552,
				5.800000000277805, 5.9000000005582365, 6.000000000838668, 6.100000001119099, 6.200000000511352,
				6.300000001679962, 6.400000001072215, 6.500000001352646, 6.600000000744899, 6.70000000102533,
				6.8000000013057615, 6.9000000006980144, 7.000000000978446, 7.100000000370699, 7.20000000065113,
				7.300000000931561, 7.400000001211993, 7.5000000006042455, 7.600000000884677, 7.70000000027693,
				7.800000000557361, 7.900000000837792, 8.000000000230045, 8.100000002286833, 8.19999999990273,
				8.30000000107134, 8.400000000463592, 8.500000001632202, 8.600000001024455, 8.700000000416708,
				8.800000001585317, 8.90000000097757, 9.000000000369823, 9.100000001538433, 9.200000002707043,
				9.300000002099296, 9.399999999715192, 9.500000002660158, 9.600000000276054, 9.700000001444664,
				9.800000000836917, 9.90000000022917, 10.00000000139778, 10.100000000790033, 10.200000001958642,
				10.300000001350895, 10.400000000743148, 10.500000000135401, 10.60000000130401, 10.700000000696264,
				10.800000000088517, 10.900000001257126, 11.000000002425736, 11.100000001817989, 11.200000001210242,
				11.300000002378852, 11.400000001771105, 11.500000002939714, 11.600000004108324, 11.70000000172422,
				11.80000000289283, 11.900000000508726, 12.000000001677336, 12.100000002845945, 12.200000004014555,
				12.300000001630451, 12.399999999246347, 12.500000000414957, 12.600000001583567, 12.699999999199463,
				12.800000000368073, 12.900000001536682, 13.000000002705292);

		assertArrayEquals(correctAnswer.toArray(), result.toArray());
	}

	@Test
	public void testDifferentiateTableFunctionInCsvFile() {
		
		
		
	}

	@Test
	public void testDifferentiateTableFunctionByArrays() {
		FunctionExplorer funcrionExplorer = new FunctionExplorer();
		List<Double> result = funcrionExplorer.differentiateTableFunction(xValues, yValues);

		List<Double> correctAnswer = Arrays.asList(1.0000000000287557, 0.9999999999177334, 0.9999999999177334,
				0.9999999999177334, 0.9999999999177334, 0.9999999999177334, 0.9999999999177334, 0.9999999999177334,
				0.9999999999177334, 0.9999999999177334, 1.0000000000287557, 1.000000000139778, 1.000000000139778,
				1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778,
				1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778,
				1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778,
				1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778,
				1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778,
				1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778,
				1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778,
				1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778,
				1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778,
				1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778,
				1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778,
				1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778,
				1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778,
				1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778,
				1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778,
				1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778,
				1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778, 1.000000000139778,
				1.000000000139778, 1.000000000139778, 1.000000000139778);

		assertArrayEquals(correctAnswer.toArray(), result.toArray());
	}
}
